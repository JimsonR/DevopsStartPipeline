trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'

stages:
- stage: Setup
  jobs:
  - job: AzureSetup
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-resource-manager-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Your existing Azure setup code
      displayName: 'Create Azure Resources'

    - task: DownloadSecureFile@1
      name: publickey
      inputs:
        secureFile: 'azure_rsa.pub'
        retryCount: '5'
    
    - bash: |
        # Read the key content directly
        PUBLIC_KEY_CONTENT=$(cat $(publickey.secureFilePath) | tr -d '\n' | awk '{$1=$1};1')
        
        # Set the key content as a variable (not the path)
        echo "##vso[task.setvariable variable=PUBLIC_KEY_CONTENT]$PUBLIC_KEY_CONTENT"
        
        # Verify the key
        echo "SSH Public Key (first 30 chars): ${PUBLIC_KEY_CONTENT:0:30}..."
      displayName: 'Process SSH public key'

- stage: Terraform
  jobs:
  - job: TerraformJob
    steps:
    - checkout: self  # Ensure all files are available
    
    - task: TerraformCLI@2
      inputs:
        command: 'init'
        workingDirectory: '$(TF_WORKING_DIR)'
        backendType: 'azurerm'
        backendServiceArm: 'azure-resource-manager-service-connection'
        backendAzureRmResourceGroupName: 'terraform-backend-rg'
        backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
        backendAzureRmContainerName: 'storageaccjimsoncontainer'
        backendAzureRmKey: 'kubernetes-dev.tfstate'

    - task: TerraformCLI@2
      inputs:
        command: 'apply'
        workingDirectory: '$(TF_WORKING_DIR)'
        environmentServiceName: 'azure-resource-manager-service-connection'
        commandOptions: '-auto-approve -var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key="$(PUBLIC_KEY_CONTENT)" -var node_count=2'
