trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
  CLEAN_KEY_PATH: '$(Pipeline.Workspace)/cleaned_ssh_key.pub'

stages:
- stage: Setup
  jobs:
  - job: AzureSetup
    steps:
    - task: DownloadSecureFile@1
      name: publickey
      inputs:
        secureFile: 'azure_rsa.pub'
    
    - bash: |
        # Create directory if it doesn't exist
        mkdir -p $(Pipeline.Workspace)
        
        # Validate and clean the key file
        if ! ssh-keygen -l -f $(publickey.secureFilePath); then
          echo "##vso[task.logissue type=error]Invalid SSH key format"
          exit 1
        fi
        
        # Create cleaned version in pipeline workspace
        sed 's/\r$//' $(publickey.secureFilePath) > $(CLEAN_KEY_PATH)
        chmod 644 $(CLEAN_KEY_PATH)
        
        # Verify the cleaned file
        echo "Key created at: $(CLEAN_KEY_PATH)"
        ls -la $(CLEAN_KEY_PATH)
        echo "Key content:"
        cat $(CLEAN_KEY_PATH)
        echo $(Pipeline.Workspace)
        # Set output variable (using the full path)
        echo "##vso[task.setvariable variable=SSH_KEY_PATH;isOutput=true]$(Pipeline.Workspace)/cleaned_ssh_key.pub"
      displayName: 'Prepare SSH Key'
      name: prepareKey

- stage: Terraform
  dependsOn: Setup
  jobs:
  - job: TerraformJob
    variables:
      SSH_KEY_PATH: $[ dependencies.Setup.outputs['AzureSetup.prepareKey.SSH_KEY_PATH'] ]
    steps:
    - bash: |
        echo "=== VERIFYING KEY PATH ==="
        cat $(CLEAN_KEY_PATH)

        echo "Using SSH key at: $(SSH_KEY_PATH)"
        echo "Current directory: $(pwd)"
        echo "Pipeline workspace: $(Pipeline.Workspace)"
        echo "Key file details:"
        ls -la $(SSH_KEY_PATH)
        echo "Key exists: $(if [ -f $(SSH_KEY_PATH) ]; then echo "YES"; else echo "NO"; fi)"
        echo "First 50 chars: $(head -c 50 $(SSH_KEY_PATH))"
      displayName: 'Verify SSH Key'
    
    - task: TerraformCLI@2
      inputs:
        command: 'init'
        workingDirectory: '$(TF_WORKING_DIR)'
        backendType: 'azurerm'
        backendServiceArm: 'azure-resource-manager-service-connection'
        backendAzureRmResourceGroupName: 'terraform-backend-rg'
        backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
        backendAzureRmContainerName: 'storageaccjimsoncontainer'
        backendAzureRmKey: 'kubernetes-dev.tfstate'

    - task: TerraformCLI@2
      inputs:
        command: 'apply'
        workingDirectory: '$(TF_WORKING_DIR)'
        commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(SSH_KEY_PATH)" -var="node_count=$(node_count)"'
