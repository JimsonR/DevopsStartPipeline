trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
  CLEAN_KEY_PATH: '$(Pipeline.Workspace)/cleaned_ssh_key.pub'

stages:
- stage: Setup
  jobs:
  - job: AzureSetup
    steps:
    - task: DownloadSecureFile@1
      name: publickey
      inputs:
        secureFile: 'azure_rsa.pub'
    
    - bash: |
        # Create directory in pipeline workspace
        mkdir -p $(Pipeline.Workspace)/sshkeys
        
        # Clean and validate the key
        PUBLIC_KEY_CONTENT=$(cat $(publickey.secureFilePath) | tr -d '\r\n' | awk '{$1=$1};1')
        
        # Verify key format
        if [[ ! "$PUBLIC_KEY_CONTENT" =~ ^ssh-rsa\ [A-Za-z0-9+/]+ ]]; then
          echo "##vso[task.logissue type=error]Invalid SSH key format"
          exit 1
        fi
        
        # Save to file (for debugging)
        echo "$PUBLIC_KEY_CONTENT" > $(Pipeline.Workspace)/sshkeys/cleaned_key.pub
        
        # Set both output variables
        echo "##vso[task.setvariable variable=PUBLIC_KEY_CONTENT;isOutput=true]$PUBLIC_KEY_CONTENT"
        echo "##vso[task.setvariable variable=SSH_KEY_PATH;isOutput=true]$(Pipeline.Workspace)/sshkeys/cleaned_key.pub"
        
        # Debug output
        echo "Key content stored (first 30 chars): ${PUBLIC_KEY_CONTENT:0:30}..."
        echo "Key file created at: $(Pipeline.Workspace)/sshkeys/cleaned_key.pub"
      displayName: 'Prepare SSH Key'
      name: prepareKey

- stage: Terraform
  dependsOn: Setup
  jobs:
  - job: TerraformJob
    variables:
      SSH_KEY_CONTENT: $[ dependencies.Setup.outputs['AzureSetup.prepareKey.PUBLIC_KEY_CONTENT'] ]
    steps:
    - bash: |
        echo "=== SSH KEY VERIFICATION ==="
        echo "Using key content directly:"
        echo "${SSH_KEY_CONTENT:0:30}..."  # Show first 30 chars
        
        # Verify the key format again
        if [[ ! "$SSH_KEY_CONTENT" =~ ^ssh-rsa\ [A-Za-z0-9+/]+ ]]; then
          echo "##vso[task.logissue type=error]Invalid SSH key format in Terraform stage"
          exit 1
        fi
      displayName: 'Verify SSH Key'
    
    - task: TerraformCLI@2
      inputs:
        command: 'init'
        workingDirectory: '$(TF_WORKING_DIR)'
        backendType: 'azurerm'
        backendServiceArm: 'azure-resource-manager-service-connection'
        backendAzureRmResourceGroupName: 'terraform-backend-rg'
        backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
        backendAzureRmContainerName: 'storageaccjimsoncontainer'
        backendAzureRmKey: 'kubernetes-dev.tfstate'

    - task: TerraformCLI@2
      inputs:
        command: 'apply'
        workingDirectory: '$(TF_WORKING_DIR)'
        commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(SSH_KEY_PATH)" -var="node_count=$(node_count)"'
