trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
  SSH_KEY_PATH: '$(System.DefaultWorkingDirectory)/cleaned_ssh_key.pub'

stages:
- stage: Setup
  jobs:
  - job: AzureSetup
    steps:
    - task: DownloadSecureFile@1
      name: publickey
      inputs:
        secureFile: 'azure_rsa.pub'
    
    - bash: |
        # Validate and clean the key file
        if ! ssh-keygen -l -f $(publickey.secureFilePath); then
          echo "##vso[task.logissue type=error]Invalid SSH key format"
          exit 1
        fi
        
        # Create cleaned version in the agent's temp directory
        TEMP_KEY_PATH="$(Agent.TempDirectory)/cleaned_ssh_key.pub"
        sed 's/\r$//' $(publickey.secureFilePath) > $TEMP_KEY_PATH
        chmod 644 $TEMP_KEY_PATH
        
        # Set output variable with the exact path
        echo "##vso[task.setvariable variable=SSH_KEY_PATH;isOutput=true]$TEMP_KEY_PATH"
        echo "Key prepared at: $TEMP_KEY_PATH"
      displayName: 'Prepare SSH Key'
    - bash: |
        echo "=== ENVIRONMENT DEBUG ==="
        echo "Agent.TempDirectory: $(Agent.TempDirectory)"
        echo "Working directory: $(System.DefaultWorkingDirectory)"
        echo "All files in temp dir:"
        ls -la $(Agent.TempDirectory)
        echo "Key file details:"
        ls -la $(SSH_KEY_PATH)
        echo "File content:"
        cat $(SSH_KEY_PATH)
      displayName: 'Debug File Paths'

      name: prepareKey

- stage: Terraform
  dependsOn: Setup
  jobs:
  - job: TerraformJob
    variables:
      SSH_KEY_PATH: $[ dependencies.Setup.outputs['AzureSetup.prepareKey.SSH_KEY_PATH'] ]
    steps:
    - bash: |
        echo "Using SSH key at: $(SSH_KEY_PATH)"
        ls -la $(SSH_KEY_PATH)
        echo "Key content (first line only):"
        head -n 1 $(SSH_KEY_PATH)
      displayName: 'Verify SSH Key'
    
    - task: TerraformCLI@2
      inputs:
        command: 'init'
        workingDirectory: '$(TF_WORKING_DIR)'
        backendType: 'azurerm'
        backendServiceArm: 'azure-resource-manager-service-connection'
        backendAzureRmResourceGroupName: 'terraform-backend-rg'
        backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
        backendAzureRmContainerName: 'storageaccjimsoncontainer'
        backendAzureRmKey: 'kubernetes-dev.tfstate'


    - task: TerraformCLI@2
      inputs:
        command: 'apply'
        workingDirectory: '$(TF_WORKING_DIR)'
        commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(SSH_KEY_PATH)" -var="node_count=$(node_count)"'