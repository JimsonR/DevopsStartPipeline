trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'

stages:
- stage: Setup
  jobs:
  - job: AzureSetup
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-resource-manager-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Your existing Azure setup code
      displayName: 'Create Azure Resources'

    - task: DownloadSecureFile@1
      name: publickey
      inputs:
        secureFile: 'azure_rsa.pub'
        retryCount: '5'
    
    - bash: |
        # Create a directory for the SSH key
        mkdir -p $(TF_WORKING_DIR)
        
        # Copy the key to a known location
        cp $(publickey.secureFilePath) $(TF_WORKING_DIR)/azure_rsa.pub
        
        # Clean any extra whitespace from the key
        sed -i 's/^[ \t]*//;s/[ \t]*$//' $(TF_WORKING_DIR)/azure_rsa.pub
        
        # Verify the key looks correct
        echo "SSH Public Key Content:"
        cat $(TF_WORKING_DIR)/azure_rsa.pub
        
        # Set the path as a variable
        echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY_PATH]$(TF_WORKING_DIR)/azure_rsa.pub"
      displayName: 'Process SSH public key'

    - bash: |
        echo "Key is definitely at: $(SSH_PUBLIC_KEY_PATH)"
        ls -la $(TF_WORKING_DIR)
        cat $(SSH_PUBLIC_KEY_PATH)
      displayName: 'Verify Key Location Before Stage End'

- stage: Terraform
  jobs:
  - job: TerraformJob
    steps:
    - bash: |
        echo "Verifying key path in Terraform stage: $(SSH_PUBLIC_KEY_PATH)"
        ls -la $(TF_WORKING_DIR)
        cat $(TF_WORKING_DIR)/azure_rsa.pub || true
      displayName: 'Verify Key Still Exists'

    - task: TerraformCLI@2
      inputs:
        command: 'init'
        workingDirectory: '$(TF_WORKING_DIR)'
        backendType: 'azurerm'
        backendServiceArm: 'azure-resource-manager-service-connection'
        backendAzureRmResourceGroupName: 'terraform-backend-rg'
        backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
        backendAzureRmContainerName: 'storageaccjimsoncontainer'
        backendAzureRmKey: 'kubernetes-dev.tfstate'

    - task: TerraformCLI@2
      inputs:
        command: 'apply'
        workingDirectory: '$(TF_WORKING_DIR)'
        environmentServiceName: 'azure-resource-manager-service-connection'
        commandOptions: '-auto-approve -var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key="$(TF_WORKING_DIR)/azure_rsa.pub" -var node_count=2'
