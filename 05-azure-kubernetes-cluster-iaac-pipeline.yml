# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# variables:
#   TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
#   CLEAN_KEY_PATH: '$(Pipeline.Workspace)/sshkeys/cleaned_key.pub'

# stages:
# - stage: Deploy
#   jobs:
#   - job: TerraformDeploy
#     steps:
#     # 1. Download the SSH key
#     - task: DownloadSecureFile@1
#       name: publickey
#       inputs:
#         secureFile: 'azure_rsa.pub'
    
#     # 2. Process the SSH key
#     - bash: |
#         # Create directory for the key
#         mkdir -p $(Pipeline.Workspace)/sshkeys
        
#         # Clean and validate the key
#         PUBLIC_KEY_CONTENT=$(cat $(publickey.secureFilePath) | tr -d '\r\n' | awk '{$1=$1};1')
        
#         # Verify key format
#         if [[ ! "$PUBLIC_KEY_CONTENT" =~ ^ssh-rsa\ [A-Za-z0-9+/]+ ]]; then
#           echo "##vso[task.logissue type=error]Invalid SSH key format"
#           exit 1
#         fi
        
#         # Save to file (for reference)
#         echo "$PUBLIC_KEY_CONTENT" > $(CLEAN_KEY_PATH)
        
#         # Set variable for Terraform
#         echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY]$PUBLIC_KEY_CONTENT"
        
#         # Debug output
#         echo "Using SSH key (first 30 chars): ${PUBLIC_KEY_CONTENT:0:30}..."
#         echo "Key file created at: $(CLEAN_KEY_PATH)"
#         ls -la $(CLEAN_KEY_PATH)
#       displayName: 'Prepare SSH Key'

#     # 3. Verify key is available
#     - bash: |
#         echo "=== SSH KEY VERIFICATION ==="
#         echo "Using key content:"
#         echo "$(SSH_PUBLIC_KEY:0:30)..."  # Show first 30 chars
#         echo "Key file exists: $(if [ -f "$(CLEAN_KEY_PATH)" ]; then echo "YES"; else echo "NO"; fi)"
#       displayName: 'Verify SSH Key'

#     # 4. Terraform Init
#     - task: TerraformCLI@2
#       inputs:
#         command: 'init'
#         workingDirectory: '$(TF_WORKING_DIR)'
#         backendType: 'azurerm'
#         backendServiceArm: 'azure-resource-manager-service-connection'
#         backendAzureRmResourceGroupName: 'terraform-backend-rg'
#         backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
#         backendAzureRmContainerName: 'storageaccjimsoncontainer'
#         backendAzureRmKey: 'kubernetes-dev.tfstate'
#     # Updated cleanup step:
#     - bash: |
#         echo "Attempting to force-unlock Terraform state..."
#         echo "yes" | terraform -chdir=$(TF_WORKING_DIR) force-unlock cb99e0f8-2609-8191-cbba-7bcc9b912a62
#         terraform -chdir=$(TF_WORKING_DIR) init -reconfigure
#       continueOnError: true
#       displayName: 'Cleanup Previous Lock'
#       env:
#         TF_INPUT: 0

#     # 5. Terraform Apply
#     - task: TerraformCLI@2
#       inputs:
#         command: 'apply'
#         workingDirectory: '$(TF_WORKING_DIR)'
#         environmentServiceName: 'azure-resource-manager-service-connection'
#         commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(CLEAN_KEY_PATH)" -var="node_count=2"'
#         allowTelemetryCollection: true

#     - task: TerraformCLI@2
#       inputs:
#         command: 'destroy'
#         workingDirectory: '$(TF_WORKING_DIR)'
#         environmentServiceName: 'azure-resource-manager-service-connection'
#         commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(CLEAN_KEY_PATH)" -var="node_count=2"'

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  TF_WORKING_DIR: '$(System.DefaultWorkingDirectory)/configuration/iaac/kubernetes'
  CLEAN_KEY_PATH: '$(Pipeline.Workspace)/sshkeys/cleaned_key.pub'

stages:
  - stage: Deploy
    jobs:
    - job: TerraformDeploy
      steps:
        # 1. Download and prepare SSH key (same as working pipeline)
        - task: DownloadSecureFile@1
          name: publickey
          inputs:
            secureFile: 'azure_rsa.pub'
        
        - bash: |
            mkdir -p $(Pipeline.Workspace)/sshkeys
            PUBLIC_KEY_CONTENT=$(cat $(publickey.secureFilePath) | tr -d '\r\n' | awk '{$1=$1};1')
            
            if [[ ! "$PUBLIC_KEY_CONTENT" =~ ^ssh-rsa\ [A-Za-z0-9+/]+ ]]; then
              echo "##vso[task.logissue type=error]Invalid SSH key format" 
              exit 1
            fi

            echo "$PUBLIC_KEY_CONTENT" > $(CLEAN_KEY_PATH)
            echo "##vso[task.setvariable variable=SSH_PUBLIC_KEY]$(cat $(CLEAN_KEY_PATH))"
          displayName: 'Prepare SSH Key'

        # 2. State management (from working pipeline)
        - bash: |
            echo "Attempting to force-unlock Terraform state..."
            echo "yes" | terraform -chdir=$(TF_WORKING_DIR) force-unlock cb99e0f8-2609-8191-cbba-7bcc9b912a62
            terraform -chdir=$(TF_WORKING_DIR) init -reconfigure
          continueOnError: true
          displayName: 'Cleanup Previous Lock'
          env:
            TF_INPUT: 0

        # 3. Terraform Init (consistent auth approach)
        - task: TerraformCLI@2
          displayName: 'Terraform Init'
          inputs:
            command: 'init'
            workingDirectory: '$(TF_WORKING_DIR)'
            backendType: 'azurerm'
            backendServiceArm: 'azure-resource-manager-service-connection'
            backendAzureRmResourceGroupName: 'terraform-backend-rg'
            backendAzureRmStorageAccountName: 'storageaccjimsonxyz'
            backendAzureRmContainerName: 'storageaccpractisecontainer'
            backendAzureRmKey: 'kubernetes-dev.tfstate'

        # 4. Terraform Apply (using same auth as working pipeline)
        - task: TerraformCLI@2
          displayName: 'Terraform Apply'
          inputs:
            command: 'apply'
            workingDirectory: '$(TF_WORKING_DIR)'
            environmentServiceName: 'azure-resource-manager-service-connection'
            commandOptions: '-auto-approve -var="client_id=$(client_id)" -var="client_secret=$(client_secret)" -var="ssh_public_key=$(CLEAN_KEY_PATH)" -var="node_count=2"'
